---
title: Configuring Spring Boot Actuator Endpoints for Apps Manager
owner: Apps Manager
---

The Apps Manager UI supports several production-ready endpoints from Spring Boot Actuator. This topic describes the Actuator endpoints and how you can configure your app to display data from the endpoints in Apps Manager. 

For more information about Spring Boot Actuator, see the [Spring Boot Actuator documentation](http://docs.spring.io/spring-boot/docs/current/reference/html/production-ready.html).

<p class="note"><strong>Note:</strong> This feature requires Spring Boot v1.5 or later.</p>


## <a id='actuator'></a> Overview

The Apps Manager integration with Spring Boot does not use the standard Spring Boot Actuators. Instead, it uses a specific set of actuators that are secured using the Space Developer role for the space that the application runs in. Authentication and authorization are automatically delegated to the [Cloud Controller](../concepts/architecture/cloud-controller.html) and the [User Account and Authentication](../concepts/architecture/uaa.html) server without any configuration from the user.

By default, actuators are secure and cannot be accessed without explicit configuration by the user, even if [Spring Security](https://projects.spring.io/spring-security/) is not included. This allows users to take advantage of the Spring Boot Apps Manager integration without accidentally exposing their actuators without security.


## <a id='endpoints'></a> Actuator Endpoints

The table below describes the Spring Boot Actuator endpoints supported by Apps Manager. To integrate these endpoints with Apps Manager, you must first [Activate Spring Boot Actuator for Your App](#activating-spring-boot-actuator).

<table>
<tr>
<th>Endpoint</th>
<th>About</th>
</tr>
<tr>
<td><code>/info</code></td>
<td>
<ul>
<li><strong>Description</strong>: Exposes details about app environment, git, and build. To send build and Git information to this endpoint, see <a href="#info-endpoint">Configure the Info Actuator</a>.</li>
<li><strong>How to use in Apps Manager</strong>: See <a href="./using-actuators.html#view-build">View Build and Git Information for Your App</a>.</li>
</ul>
</td>
</tr>
<tr>
<td><code>/health</code></td>
<td>
<ul>
<li><strong>Description</strong>: Shows health status or detailed health information over a secure connection. <br>Spring Boot Actuator includes the auto-configured health indicators specified in the <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#auto-configured-healthindicators">Auto-configured HealthIndicators</a> section of the Spring Boot documentation. If you want to write custom health indicators, see the <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#writing-custom-healthindicators">Writing custom HealthIndicators</a> section of the Spring Boot documentation.</li>
<li><strong>How to use in Apps Manager</strong>: See <a href="./using-actuators.html#view-app-health">View App Health</a>.</li>
</ul>
</td>
</tr>
<tr>
<td><code>/loggers</code></td>
<td>
<ul>
<li><strong>Description</strong>: Lists and allows modification of the levels of the loggers in an app.</li>
<li><strong>How to use in Apps Manager</strong>: See <a href="./using-actuators.html#manage-log-levels">Manage Log Levels</a>.</li>
</ul>
</td>
</tr>
<tr>
<td><code>/dump</code></td>
<td>
<ul>
<li><strong>Description</strong>: Generates a thread dump.</li>
<li><strong>How to use in Apps Manager</strong>: See <a href="./using-actuators.html#view-thread">View Thread Dump</a>.</li>
</ul>
</td>
</tr>
<tr>
<td><code>/trace</code></td>
<td>
<ul>
<li><strong>Description</strong>: Displays trace information from your app for each of the last 100 HTTP requests. For more information, see the <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-http-tracing">Tracing</a> section of the Spring Boot documentation.</li>
<li><strong>How to use in Apps Manager</strong>: See <a href="./using-actuators.html#view-trace">View Request Traces</a>.</li>
</ul>
</td>
</tr>
<tr>
<td><code>/heapdump</code></td>
<td>
<ul>
<li><strong>Description</strong>: Generates a heap dump and provides a compressed file containing the results.</li>
<li><strong>How to use in Apps Manager</strong>: See <a href="./using-actuators.html#view-heap">Download Heap Dump</a>.</li>
</ul>
</td>
</tr>
<td><code>/mappings</code></td>
<td>
<ul>
<li><strong>Description</strong>: Displays the endpoints an app serves and other related details.</li>
<li><strong>How to use in Apps Manager</strong>: See <a href="./using-actuators.html#view-mappings">View Mappings</a>.</li>
</ul>
</td>
</tr>
</table>


## <a id="activating-spring-boot-actuator"></a> Activate Spring Boot Actuator for Your App

You must add a `spring-boot-starter-actuator` dependency to your app project for the production-ready HTTP endpoints to return values. For more information, see the [Enabling production-ready features](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-enabling) section of the Spring Boot documentation. 

1. Follow the instructions below that correspond to your project type. 
    * **Maven**: If you use Maven, add the following to your project:
        <pre>
        \<dependencies\>
            \<dependency\> 
                \<groupId\>org.springframework.boot\</groupId\>
                \<artifactId\>spring-boot-starter-actuator\</artifactId\>
            \</dependency\>
        \</dependencies\>
        </pre>
    * **Gradle**: If you use Gradle, add the following to your project:
        <pre>
        dependencies {
            compile("org.springframework.boot:spring-boot-starter-actuator")
        }
        </pre>

1. If you use self-signed certificates in your <%= vars.platform_name %> deployment for UAA or the Cloud Controller, specify in your `application.properties` file to skip SSL validation:
<pre>
management.cloudfoundry.skip-ssl-validation=true
</pre>
See [Cloud Foundry support](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-cloudfoundry) in the Spring Boot Actuator documentation for more information.


## <a id="info-endpoint"></a> Configure the Info Actuator

The `/info` endpoint provides information about the project build for your app, as well as its git details.

### <a id="build-info"></a> Add Build Information

To add build information to the `/info` endpoint, follow the instructions below that correspond to your project type.

#### Maven

Add the following to your app project:

``` java
<build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <version>1.4.2.RELEASE</version>
            <executions>
                <execution>
                    <goals>
                        <goal>build-info</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
```

#### Gradle

Add the following to your app project:

``` java
springBoot  {
    buildInfo()
}
```

### <a id="git-info"></a> Add Git Information

To add git information to the `/info` endpoint, follow these instructions:


1. Add the following property to your `application.properties` file:

	```
	management.info.git.mode=full
	```

1. Follow the instructions below that correspond to your project type.

#### Maven

Add the following plugin to your project:

``` java
<build>
    <plugins>
        <plugin>
            <groupId>pl.project13.maven</groupId>
            <artifactId>git-commit-id-plugin</artifactId>
        </plugin>
    </plugins>
</build>
```

#### Gradle

Add the following plugin to your project: 

``` java
plugins {
    id "com.gorylenko.gradle-git-properties" version "1.4.17"
}
```
